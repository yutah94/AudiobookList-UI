{"version":3,"sources":["consts.js","jazz.png","components/AudiobooksList.js","components/EditAudiobooks.js","components/AddAudiobooks.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","uriBase","Audiobooks","props","className","audiobooks","completed","book_title","author","genre","to","_id","variant","size","onClick","e","deleteAudiobook","AudiobooksList","state","audiobookList","bind","retrieveBooklist","this","_isMounted","axios","get","then","response","setState","data","catch","error","console","log","map","currentAudiobook","i","key","id","delete","deletedCount","filter","style","marginTop","Component","EditAudiobooks","onChangeBookTitle","onChangeAuthor","onChangeGenre","onChangeCompleted","onSubmit","match","params","target","value","preventDefault","obj","put","res","history","push","type","onChange","name","checked","htmlFor","AddAudiobooks","newAudiobook","post","App","href","src","jazz","width","height","alt","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.90751aac.chunk.js","sourcesContent":["// const uriBase = 'http://localhost:5556';\r\nconst uriBase = \"https://audiobook-list.herokuapp.com\"\r\n\r\nmodule.exports.uriBase = uriBase;","module.exports = __webpack_public_path__ + \"static/media/jazz.a8ba4328.png\";","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom'\r\nimport axios from 'axios';\r\nimport { uriBase } from '../consts';\r\n\r\nconst Audiobooks = props => (\r\n    <tr>\r\n        <td className={props.audiobooks.completed ? 'completed' : ''}>{props.audiobooks.book_title}</td>\r\n        <td className={props.audiobooks.completed ? 'completed' : ''}>{props.audiobooks.author}</td>\r\n        <td className={props.audiobooks.completed ? 'completed' : ''}>{props.audiobooks.genre}</td>\r\n        <td>\r\n            <Link to={\"/edit/\"+props.audiobooks._id}>Edit</Link>\r\n        </td>\r\n        <td>\r\n            <button \r\n                className=\"remove-btn\"\r\n                variant=\"danger\"\r\n                size=\"sm\"\r\n                onClick={(e) => props.deleteAudiobook(props.audiobooks._id)}\r\n                >&times;</button>\r\n        </td>\r\n    </tr>\r\n)\r\n\r\n\r\nclass AudiobooksList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {audiobooks: []};\r\n        this.audiobookList = this.audiobookList.bind(this);\r\n        this.deleteAudiobook = this.deleteAudiobook.bind(this);\r\n        this.retrieveBooklist = this.retrieveBooklist.bind(this);\r\n    }\r\n\r\n    retrieveBooklist() {\r\n        this._isMounted = true;\r\n\r\n        axios.get(`${uriBase}/audiobooks/`)\r\n        .then(response => {\r\n            this.setState({audiobooks: response.data});\r\n        })\r\n        .catch(function(error) {\r\n            console.log(error);\r\n        })\r\n    }\r\n\r\n    // componentDidUpdate() {\r\n    //     this._isMounted = false;\r\n\r\n    //     axios.get(`${uriBase}/audiobooks/`)\r\n    //     .then(response => {\r\n    //         this.setState({audiobooks: response.data});\r\n    //     })\r\n    //     .catch(function(error) {\r\n    //         console.log(error);\r\n    //     })\r\n    // }\r\n\r\n    audiobookList() {\r\n        return this.state.audiobooks.map((currentAudiobook, i) => {\r\n            return <Audiobooks audiobooks={currentAudiobook} key={i} deleteAudiobook={this.deleteAudiobook} />\r\n        });\r\n    }\r\n\r\n    deleteAudiobook(id) {\r\n        axios.delete(`${uriBase}/audiobooks/${id}`)\r\n        .then(response => {\r\n            console.log(\"delete: \", response.data.deletedCount);\r\n            // if (response.data.deletedCount === 1) {\r\n            //     let tempArray = this.state.audiobooks\r\n            //     tempArray = tempArray.filter(audiobook => audiobook.id !== id);\r\n            //     console.log(tempArray);\r\n            //     this.setState({audiobooks: tempArray})\r\n            //     return tempArray;\r\n            // }\r\n            this.setState(state => ({\r\n                audiobooks: this.state.audiobooks.filter(audiobooks => audiobooks._id !== id)\r\n            }));\r\n        })\r\n        //.then(this.retrieveBooklist())\r\n        .catch(function(error) {\r\n            console.log(error);\r\n        })\r\n    };\r\n\r\n    componentDidMount(){\r\n        this.retrieveBooklist();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <h3>Audiobook List</h3>\r\n                <table className=\"table table-striped\" style={{ marginTop: 20 }} >\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Book Title</th>\r\n                            <th>Author</th>\r\n                            <th>Genre</th>\r\n                            <th>Actions</th>\r\n                            <th>Delete</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        { this.audiobookList() }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AudiobooksList;\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { uriBase } from '../consts';\r\n\r\nexport class EditAudiobooks extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.onChangeBookTitle = this.onChangeBookTitle.bind(this);\r\n        this.onChangeAuthor = this.onChangeAuthor.bind(this);\r\n        this.onChangeGenre = this.onChangeGenre.bind(this);\r\n        this.onChangeCompleted = this.onChangeCompleted.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n\r\n        this.state = {\r\n            book_title: '',\r\n            author: '',\r\n            genre: '',\r\n            completed: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get(`${uriBase}/audiobooks/`+this.props.match.params.id)\r\n            .then(response => {\r\n                this.setState({\r\n                    book_title: response.data.book_title,\r\n                    author: response.data.author,\r\n                    genre: response.data.genre,\r\n                    completed: response.data.completed\r\n                })   \r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    onChangeBookTitle(e) {\r\n        this.setState({\r\n            book_title: e.target.value\r\n        });\r\n    }\r\n\r\n    onChangeAuthor(e) {\r\n        this.setState({\r\n            author: e.target.value\r\n        });\r\n    }\r\n\r\n    onChangeGenre(e) {\r\n        this.setState({\r\n            genre: e.target.value\r\n        });\r\n    }\r\n\r\n    onChangeCompleted(e) {\r\n        this.setState({\r\n            completed: !this.state.completed\r\n        });\r\n    }\r\n\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n        const obj = {\r\n            book_title: this.state.book_title,\r\n            author: this.state.author,\r\n            genre: this.state.genre,\r\n            completed: this.state.completed\r\n        };\r\n\r\n        console.log(obj);\r\n        axios.put(`${uriBase}/audiobooks/${this.props.match.params.id}`, obj)\r\n            .then(res => console.log(res.data))\r\n            .then(res => {\r\n                this.props.history.push('/');\r\n            })\r\n            .catch(error => {\r\n                console.log(error.res)\r\n\r\n            \r\n            });\r\n\r\n            \r\n        \r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <h3>Edit Audiobook</h3>\r\n                <form onSubmit={this.onSubmit}>\r\n                    <div className=\"form-group\"> \r\n                        <label>Book Title: </label>\r\n                        <input  type=\"text\"\r\n                                className=\"form-control\"\r\n                                value={this.state.book_title}\r\n                                onChange={this.onChangeBookTitle}\r\n                                />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Author: </label>\r\n                        <input \r\n                                type=\"text\" \r\n                                className=\"form-control\"\r\n                                value={this.state.author}\r\n                                onChange={this.onChangeAuthor}\r\n                                />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <div className=\"form-check form-check-inline\">\r\n                            <input  className=\"form-check-input\" \r\n                                    type=\"radio\" \r\n                                    name=\"genreOptions\" \r\n                                    id=\"genreSelf-Help\" \r\n                                    value=\"Self-Help\"\r\n                                    checked={this.state.genre==='Self-Help'} \r\n                                    onChange={this.onChangeGenre}\r\n                                    />\r\n                            <label className=\"form-check-label\">Self-Help</label>\r\n                        </div>\r\n                        <div className=\"form-check form-check-inline\">\r\n                            <input  className=\"form-check-input\" \r\n                                    type=\"radio\" \r\n                                    name=\"genreOptions\" \r\n                                    id=\"genreBiography\" \r\n                                    value=\"Biography\" \r\n                                    checked={this.state.genre==='Biography'} \r\n                                    onChange={this.onChangeGenre}\r\n                                    />\r\n                            <label className=\"form-check-label\">Biography</label>\r\n                        </div>\r\n                        <div className=\"form-check form-check-inline\">\r\n                            <input  className=\"form-check-input\" \r\n                                    type=\"radio\" \r\n                                    name=\"GenreOptions\" \r\n                                    id=\"GenreReligious\" \r\n                                    value=\"Religious\" \r\n                                    checked={this.state.genre==='Religious'} \r\n                                    onChange={this.onChangeGenre}\r\n                                    />\r\n                            <label className=\"form-check-label\">Religious</label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-check\">\r\n                        <input  className=\"form-check-input\"\r\n                                id=\"completedCheckbox\"\r\n                                type=\"checkbox\"\r\n                                name=\"completedCheckbox\"\r\n                                onChange={this.onChangeCompleted}\r\n                                checked={this.state.completed}\r\n                                value={this.state.completed}\r\n                                />\r\n                        <label className=\"form-check-label\" htmlFor=\"completedCheckbox\">\r\n                            Completed\r\n                        </label>                        \r\n                    </div>\r\n\r\n                    <br />\r\n\r\n                    <div className=\"form-group\">\r\n                        <input type=\"submit\" value=\"Update AudiobookList\" className=\"btn btn-primary\" />\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EditAudiobooks;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { uriBase } from '../consts';\r\n\r\nexport class AddAudiobooks extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.onChangeBookTitle = this.onChangeBookTitle.bind(this);\r\n        this.onChangeAuthor = this.onChangeAuthor.bind(this);\r\n        this.onChangeGenre = this.onChangeGenre.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n\r\n        this.state = {\r\n            book_title: '',\r\n            author: '',\r\n            genre: '',\r\n            completed: false\r\n        }\r\n    }\r\n\r\n    onChangeBookTitle(e) {\r\n        this.setState({\r\n            book_title: e.target.value\r\n        });\r\n    }\r\n\r\n    onChangeAuthor(e) {\r\n        this.setState({\r\n            author: e.target.value\r\n        });\r\n    }\r\n\r\n    onChangeGenre(e) {\r\n        this.setState({\r\n            genre: e.target.value\r\n        });\r\n    }\r\n\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        //submit logic\r\n        console.log(`Form submitted: `);\r\n        console.log(`Book Title: ${this.state.book_title}`);\r\n        console.log(`Author: ${this.state.author}`);\r\n        console.log(`Genre: ${this.state.genre}`);\r\n        console.log(`Completed: ${this.state.completed}`);\r\n\r\n        const newAudiobook = {\r\n            book_title: this.state.book_title,\r\n            author: this.state.author,\r\n            genre: this.state.genre,\r\n            completed: this.state.completed\r\n        }\r\n\r\n        axios.post(`${uriBase}/audiobooks/add`, newAudiobook)\r\n        .then(res => console.log(res.data));\r\n\r\n        this.setState({\r\n            book_title: '',\r\n            author: '',\r\n            genre: '',\r\n            completed: false\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{marginTop: 20}} className=\"container\">\r\n                <h3>Add New Audiobook</h3>\r\n                <form onSubmit={this.onSubmit}>\r\n                    <div className=\"form-group\">\r\n                        <label>Book Title: </label>\r\n                            <input type=\"text\"\r\n                                className=\"form-control\"\r\n                                value={this.state.book_title}\r\n                                onChange={this.onChangeBookTitle}\r\n                                />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Author: </label>\r\n                            <input type=\"text\"\r\n                                className=\"form-control\"\r\n                                value={this.state.author}\r\n                                onChange={this.onChangeAuthor}\r\n                                />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <div className=\"form-check form-check-inline\">\r\n                            <input className=\"form-check-input\"\r\n                                   type=\"radio\"\r\n                                   name=\"genreOptions\"\r\n                                   id=\"genreSelf-Help\"\r\n                                   value=\"Self-Help\"\r\n                                   checked={this.state.genre==='Self-Help'}\r\n                                   onChange={this.onChangeGenre}\r\n                                   />\r\n                                <label className=\"form-check-label\">Self-Help</label>\r\n                        </div>\r\n                        <div className=\"form-check form-check-inline\">\r\n                            <input className=\"form-check-input\"\r\n                                   type=\"radio\"\r\n                                   name=\"genreOptions\"\r\n                                   id=\"genreBiography\"\r\n                                   value=\"Biography\"\r\n                                   checked={this.state.genre==='Biography'}\r\n                                   onChange={this.onChangeGenre}\r\n                                   />\r\n                                <label className=\"form-check-label\">Biography</label>\r\n                        </div>\r\n                        <div className=\"form-check form-check-inline\">\r\n                            <input className=\"form-check-input\"\r\n                                   type=\"radio\"\r\n                                   name=\"genreOptions\"\r\n                                   id=\"genreReligious\"\r\n                                   value=\"Religious\"\r\n                                   checked={this.state.genre==='Religious'}\r\n                                   onChange={this.onChangeGenre}\r\n                                   />\r\n                                <label className=\"form-check-label\">Religious</label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <input type=\"submit\" value=\"Add Audiobook\" className=\"btn btn-primary\" />\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddAudiobooks;\r\n","import React, {Component} from 'react';\r\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nimport AudiobooksList from \"./components/AudiobooksList\";\r\nimport EditAudiobooks from \"./components/EditAudiobooks\";\r\nimport AddAudiobooks from \"./components/AddAudiobooks\";\r\n\r\nimport jazz from \"./jazz.png\"\r\n\r\nclass App extends Component {\r\n  render(){\r\n    return (\r\n      <Router>\r\n        <div className=\"App\">\r\n\r\n          <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary container\">\r\n            <a className=\"navbar-brand\" href=\"https://github.com/yutah94\">\r\n              <img src={jazz} width=\"30\" height=\"30\" alt=\"Yuta's Github\" />\r\n            </a>\r\n            <Link to=\"/\" className=\"navbar-brand\"><h1>Yuta's Audiobook List App</h1></Link>\r\n            \r\n              <ul className=\"navbar-nav mr-auto\">\r\n                <li className=\"navbar-item\">\r\n                  <Link to=\"/\" className=\"nav-link\">Audiobook List</Link>\r\n                </li>\r\n                <li className=\"navbar-item\">\r\n                  <Link to=\"/create\" className=\"nav-link\">Add Audiobook</Link>\r\n                </li>\r\n              </ul>\r\n          </nav>\r\n\r\n          <Route path=\"/\" exact component={AudiobooksList} />\r\n          <Route path=\"/edit/:id\" component={EditAudiobooks} />\r\n          <Route path=\"/create\" component={AddAudiobooks} />\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}